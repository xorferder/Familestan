// <auto-generated />
using System;
using Familestan.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Familestan.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250316210904_UpdateDatabaseChanges")]
    partial class UpdateDatabaseChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Familestan.Core.Entities.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CommentId"));

                    b.Property<string>("CommentEncryptedContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CommentMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("CommentPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentMemberId");

                    b.HasIndex("CommentPostId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyCircle", b =>
                {
                    b.Property<long>("FamilyCircleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FamilyCircleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FamilyCircleConnectedMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FamilyCircleCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FamilyCircleMemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyCircleId");

                    b.HasIndex("FamilyCircleConnectedMemberId");

                    b.HasIndex("FamilyCircleMemberId");

                    b.ToTable("FamilyCircles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyClaim", b =>
                {
                    b.Property<long>("FamilyClaimId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FamilyClaimId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FamilyClaimClaimantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FamilyClaimCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FamilyClaimIsVerified")
                        .HasColumnType("bit");

                    b.Property<long>("FamilyClaimRelationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("FamilyClaimTargetMemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyClaimId");

                    b.HasIndex("FamilyClaimClaimantId");

                    b.HasIndex("FamilyClaimRelationTypeId");

                    b.HasIndex("FamilyClaimTargetMemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("FamilyClaims");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelation", b =>
                {
                    b.Property<long>("FamilyRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FamilyRelationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FamilyRelationCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("FamilyRelationIsConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("FamilyRelationMember1Id")
                        .HasColumnType("bigint");

                    b.Property<long>("FamilyRelationMember2Id")
                        .HasColumnType("bigint");

                    b.Property<long>("FamilyRelationTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyRelationId");

                    b.HasIndex("FamilyRelationMember1Id");

                    b.HasIndex("FamilyRelationMember2Id");

                    b.HasIndex("FamilyRelationTypeId");

                    b.HasIndex("MemberId");

                    b.ToTable("FamilyRelations");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelationType", b =>
                {
                    b.Property<long>("FamilyRelationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FamilyRelationTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyRelationCategory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FamilyRelationTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyRelationTypeId");

                    b.ToTable("FamilyRelationTypes");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyTree", b =>
                {
                    b.Property<long>("FamilyTreeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FamilyTreeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FamilyTreeCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FamilyTreeMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("FamilyTreeRootMemberId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FamilyTreeId");

                    b.HasIndex("FamilyTreeMemberId");

                    b.HasIndex("FamilyTreeRootMemberId");

                    b.ToTable("FamilyTrees");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Follow", b =>
                {
                    b.Property<long>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FollowId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("FollowFollowerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FollowFollowingId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberId1")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("FollowId");

                    b.HasIndex("FollowFollowerId");

                    b.HasIndex("FollowFollowingId");

                    b.HasIndex("MemberId");

                    b.HasIndex("MemberId1");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Like", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LikeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LikeMemberId")
                        .HasColumnType("bigint");

                    b.Property<long>("LikePostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LikeId");

                    b.HasIndex("LikeMemberId");

                    b.HasIndex("LikePostId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Log", b =>
                {
                    b.Property<long>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogAction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LogCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogIPAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LogUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("LogId");

                    b.HasIndex("LogUserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Media", b =>
                {
                    b.Property<long>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MediaId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("MediaPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MediaId");

                    b.HasIndex("MediaPostId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Member", b =>
                {
                    b.Property<long>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MemberId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MemberEncryptedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberEncryptedPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MemberIsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("MemberIsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("MemberLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberOtpCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MemberOtpExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("MemberPasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("NotificationCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("NotificationIsRead")
                        .HasColumnType("bit");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("NotificationReceiverId")
                        .HasColumnType("bigint");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationReceiverId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Familestan.Core.Entities.NotificationSetting", b =>
                {
                    b.Property<long>("NotificationSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationSettingId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("NotificationSettingUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ReceiveCommentNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveFollowNotifications")
                        .HasColumnType("bit");

                    b.Property<bool>("ReceiveMessageNotifications")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("NotificationSettingId");

                    b.HasIndex("NotificationSettingUserId");

                    b.ToTable("NotificationSettings");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Permission", b =>
                {
                    b.Property<long>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PermissionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Post", b =>
                {
                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PostId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PostCreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostEncryptedContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PostIsPublic")
                        .HasColumnType("bit");

                    b.Property<long>("PostMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PostMemberId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostTag", b =>
                {
                    b.Property<long>("PostTagPostId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostTagTagId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TagId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("PostTagPostId", "PostTagTagId");

                    b.HasIndex("PostId");

                    b.HasIndex("PostTagTagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostWord", b =>
                {
                    b.Property<long>("PostWordPostId")
                        .HasColumnType("bigint");

                    b.Property<long>("PostWordWordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PostWordFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WordId")
                        .HasColumnType("bigint");

                    b.HasKey("PostWordPostId", "PostWordWordId");

                    b.HasIndex("PostWordWordId");

                    b.HasIndex("WordId");

                    b.ToTable("PostWords");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Role", b =>
                {
                    b.Property<long>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.RolePermission", b =>
                {
                    b.Property<long>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RolePermissionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolePermissionPermissionId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolePermissionRoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RolePermissionPermissionId");

                    b.HasIndex("RolePermissionRoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Tag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TagId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEncryptedEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEncryptedPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserIsActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Familestan.Core.Entities.UserRole", b =>
                {
                    b.Property<long>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserRoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleRoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserRoleUserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserRoleRoleId");

                    b.HasIndex("UserRoleUserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Word", b =>
                {
                    b.Property<long>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("WordId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("WordText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WordId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Comment", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "CommentMember")
                        .WithMany()
                        .HasForeignKey("CommentMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Post", "CommentPost")
                        .WithMany()
                        .HasForeignKey("CommentPostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberComments")
                        .HasForeignKey("MemberId");

                    b.HasOne("Familestan.Core.Entities.Post", null)
                        .WithMany("PostComments")
                        .HasForeignKey("PostId");

                    b.Navigation("CommentMember");

                    b.Navigation("CommentPost");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyCircle", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "FamilyCircleConnectedMember")
                        .WithMany()
                        .HasForeignKey("FamilyCircleConnectedMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", "FamilyCircleMember")
                        .WithMany()
                        .HasForeignKey("FamilyCircleMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FamilyCircleConnectedMember");

                    b.Navigation("FamilyCircleMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyClaim", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "FamilyClaimClaimant")
                        .WithMany()
                        .HasForeignKey("FamilyClaimClaimantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.FamilyRelationType", "FamilyClaimRelationType")
                        .WithMany("FamilyClaims")
                        .HasForeignKey("FamilyClaimRelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", "FamilyClaimTargetMember")
                        .WithMany()
                        .HasForeignKey("FamilyClaimTargetMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberFamilyClaims")
                        .HasForeignKey("MemberId");

                    b.Navigation("FamilyClaimClaimant");

                    b.Navigation("FamilyClaimRelationType");

                    b.Navigation("FamilyClaimTargetMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelation", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "FamilyRelationMember1")
                        .WithMany()
                        .HasForeignKey("FamilyRelationMember1Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", "FamilyRelationMember2")
                        .WithMany()
                        .HasForeignKey("FamilyRelationMember2Id")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.FamilyRelationType", "FamilyRelationType")
                        .WithMany("FamilyRelations")
                        .HasForeignKey("FamilyRelationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberFamilyRelations")
                        .HasForeignKey("MemberId");

                    b.Navigation("FamilyRelationMember1");

                    b.Navigation("FamilyRelationMember2");

                    b.Navigation("FamilyRelationType");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyTree", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "FamilyTreeMember")
                        .WithMany()
                        .HasForeignKey("FamilyTreeMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", "FamilyTreeRootMember")
                        .WithMany()
                        .HasForeignKey("FamilyTreeRootMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FamilyTreeMember");

                    b.Navigation("FamilyTreeRootMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Follow", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "FollowFollower")
                        .WithMany()
                        .HasForeignKey("FollowFollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", "FollowFollowing")
                        .WithMany()
                        .HasForeignKey("FollowFollowingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberFollowers")
                        .HasForeignKey("MemberId");

                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberFollowing")
                        .HasForeignKey("MemberId1");

                    b.Navigation("FollowFollower");

                    b.Navigation("FollowFollowing");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Like", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "LikeMember")
                        .WithMany()
                        .HasForeignKey("LikeMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Post", "LikePost")
                        .WithMany()
                        .HasForeignKey("LikePostId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberLikes")
                        .HasForeignKey("MemberId");

                    b.HasOne("Familestan.Core.Entities.Post", null)
                        .WithMany("PostLikes")
                        .HasForeignKey("PostId");

                    b.Navigation("LikeMember");

                    b.Navigation("LikePost");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Log", b =>
                {
                    b.HasOne("Familestan.Core.Entities.User", "LogUser")
                        .WithMany()
                        .HasForeignKey("LogUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogUser");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Media", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Post", "MediaPost")
                        .WithMany("PostMediaFiles")
                        .HasForeignKey("MediaPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaPost");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Notification", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "NotificationReceiver")
                        .WithMany()
                        .HasForeignKey("NotificationReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationReceiver");
                });

            modelBuilder.Entity("Familestan.Core.Entities.NotificationSetting", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "NotificationSettingUser")
                        .WithMany()
                        .HasForeignKey("NotificationSettingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationSettingUser");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Post", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", null)
                        .WithMany("MemberPosts")
                        .HasForeignKey("MemberId");

                    b.HasOne("Familestan.Core.Entities.Member", "PostMember")
                        .WithMany()
                        .HasForeignKey("PostMemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostTag", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Post", null)
                        .WithMany("PostPostTags")
                        .HasForeignKey("PostId");

                    b.HasOne("Familestan.Core.Entities.Post", "PostTagPost")
                        .WithMany()
                        .HasForeignKey("PostTagPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Tag", "PostTagTag")
                        .WithMany()
                        .HasForeignKey("PostTagTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Tag", null)
                        .WithMany("TagPostTags")
                        .HasForeignKey("TagId");

                    b.Navigation("PostTagPost");

                    b.Navigation("PostTagTag");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostWord", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Post", "PostWordPost")
                        .WithMany()
                        .HasForeignKey("PostWordPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Word", "PostWordWord")
                        .WithMany()
                        .HasForeignKey("PostWordWordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Word", null)
                        .WithMany("WordPostWords")
                        .HasForeignKey("WordId");

                    b.Navigation("PostWordPost");

                    b.Navigation("PostWordWord");
                });

            modelBuilder.Entity("Familestan.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Permission", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("Familestan.Core.Entities.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");

                    b.HasOne("Familestan.Core.Entities.Permission", "RolePermissionPermission")
                        .WithMany()
                        .HasForeignKey("RolePermissionPermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Role", "RolePermissionRole")
                        .WithMany()
                        .HasForeignKey("RolePermissionRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RolePermissionPermission");

                    b.Navigation("RolePermissionRole");
                });

            modelBuilder.Entity("Familestan.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Role", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId");

                    b.HasOne("Familestan.Core.Entities.User", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId");

                    b.HasOne("Familestan.Core.Entities.Role", "UserRoleRole")
                        .WithMany()
                        .HasForeignKey("UserRoleRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.User", "UserRoleUser")
                        .WithMany()
                        .HasForeignKey("UserRoleUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRoleRole");

                    b.Navigation("UserRoleUser");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelationType", b =>
                {
                    b.Navigation("FamilyClaims");

                    b.Navigation("FamilyRelations");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Member", b =>
                {
                    b.Navigation("MemberComments");

                    b.Navigation("MemberFamilyClaims");

                    b.Navigation("MemberFamilyRelations");

                    b.Navigation("MemberFollowers");

                    b.Navigation("MemberFollowing");

                    b.Navigation("MemberLikes");

                    b.Navigation("MemberPosts");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostMediaFiles");

                    b.Navigation("PostPostTags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Tag", b =>
                {
                    b.Navigation("TagPostTags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.User", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Word", b =>
                {
                    b.Navigation("WordPostWords");
                });
#pragma warning restore 612, 618
        }
    }
}
