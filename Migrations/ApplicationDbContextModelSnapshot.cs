// <auto-generated />
using System;
using Familestan.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Familestan.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Familestan.Core.Entities.Comment", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<string>("CommentEncryptedContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CommentMemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CommentPostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentMemberId");

                    b.HasIndex("CommentPostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyCircle", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<long?>("ConnectedMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FamilyCircleId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedMemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("FamilyCircles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyClaim", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ClaimantId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FamilyClaimId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FamilyRelationTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRejected")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("TargetMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClaimantId");

                    b.HasIndex("FamilyRelationTypeId");

                    b.HasIndex("TargetMemberId");

                    b.ToTable("FamilyClaims");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelation", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FamilyRelationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FamilyRelationTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("Member1Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("Member2Id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FamilyRelationTypeId");

                    b.HasIndex("Member1Id");

                    b.HasIndex("Member2Id");

                    b.ToTable("FamilyRelations");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelationType", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyRelationCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("FamilyRelationTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("FamilyRelationTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FamilyRelationTypes");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyTree", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FamilyTreeId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RootMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("RootMemberId");

                    b.ToTable("FamilyTrees");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Follow", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("FollowFollowerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("FollowFollowingId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FollowFollowerId");

                    b.HasIndex("FollowFollowingId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Like", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("LikeMemberId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LikePostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LikeMemberId");

                    b.HasIndex("LikePostId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Log", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogAction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogIPAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LogUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LogUserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Media", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MediaPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MediaUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MediaPostId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Member", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MemberEncryptedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberEncryptedPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MemberFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MemberIsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool?>("MemberIsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("MemberLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MemberUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MemberUserId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Permission", b =>
                {
                    b.Property<long?>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("PermissionId"));

                    b.Property<string>("PermissionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Post", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PostEncryptedContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PostMemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostMemberId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostTag", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PostTagPostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostTagTagId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PostTagPostId");

                    b.HasIndex("PostTagTagId");

                    b.ToTable("PostTags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostWord", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PostId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PostWordId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WordId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("WordId");

                    b.ToTable("PostWords");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Familestan.Core.Entities.RolePermission", b =>
                {
                    b.Property<long?>("RolePermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("RolePermissionId"));

                    b.Property<long?>("PermissionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("RolePermissionId");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Tag", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TagName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserBio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEncryptedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserEncryptedPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("UserIsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool?>("UserIsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("UserLastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Familestan.Core.Entities.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RoleId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId1")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserRoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Familestan.Core.Entities.Word", b =>
                {
                    b.Property<long?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long?>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("WordId")
                        .HasColumnType("bigint");

                    b.Property<string>("WordText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Familestan.Core.Entities.Comment", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "CommentMember")
                        .WithMany()
                        .HasForeignKey("CommentMemberId");

                    b.HasOne("Familestan.Core.Entities.Post", "CommentPost")
                        .WithMany("PostComments")
                        .HasForeignKey("CommentPostId");

                    b.Navigation("CommentMember");

                    b.Navigation("CommentPost");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyCircle", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "ConnectedMember")
                        .WithMany()
                        .HasForeignKey("ConnectedMemberId");

                    b.HasOne("Familestan.Core.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.Navigation("ConnectedMember");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyClaim", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "Claimant")
                        .WithMany()
                        .HasForeignKey("ClaimantId");

                    b.HasOne("Familestan.Core.Entities.FamilyRelationType", "FamilyRelationType")
                        .WithMany("FamilyClaims")
                        .HasForeignKey("FamilyRelationTypeId");

                    b.HasOne("Familestan.Core.Entities.Member", "TargetMember")
                        .WithMany()
                        .HasForeignKey("TargetMemberId");

                    b.Navigation("Claimant");

                    b.Navigation("FamilyRelationType");

                    b.Navigation("TargetMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelation", b =>
                {
                    b.HasOne("Familestan.Core.Entities.FamilyRelationType", "FamilyRelationType")
                        .WithMany("FamilyRelations")
                        .HasForeignKey("FamilyRelationTypeId");

                    b.HasOne("Familestan.Core.Entities.Member", "Member1")
                        .WithMany()
                        .HasForeignKey("Member1Id");

                    b.HasOne("Familestan.Core.Entities.Member", "Member2")
                        .WithMany()
                        .HasForeignKey("Member2Id");

                    b.Navigation("FamilyRelationType");

                    b.Navigation("Member1");

                    b.Navigation("Member2");
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyTree", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId");

                    b.HasOne("Familestan.Core.Entities.Member", "RootMember")
                        .WithMany()
                        .HasForeignKey("RootMemberId");

                    b.Navigation("Member");

                    b.Navigation("RootMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Follow", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "FollowFollower")
                        .WithMany()
                        .HasForeignKey("FollowFollowerId");

                    b.HasOne("Familestan.Core.Entities.Member", "FollowFollowing")
                        .WithMany()
                        .HasForeignKey("FollowFollowingId");

                    b.Navigation("FollowFollower");

                    b.Navigation("FollowFollowing");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Like", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "LikeMember")
                        .WithMany()
                        .HasForeignKey("LikeMemberId");

                    b.HasOne("Familestan.Core.Entities.Post", "LikePost")
                        .WithMany("PostLikes")
                        .HasForeignKey("LikePostId");

                    b.Navigation("LikeMember");

                    b.Navigation("LikePost");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Log", b =>
                {
                    b.HasOne("Familestan.Core.Entities.User", "LogUser")
                        .WithMany()
                        .HasForeignKey("LogUserId");

                    b.Navigation("LogUser");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Media", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Post", "MediaPost")
                        .WithMany("PostMediaFiles")
                        .HasForeignKey("MediaPostId");

                    b.Navigation("MediaPost");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Member", b =>
                {
                    b.HasOne("Familestan.Core.Entities.User", "MemberUser")
                        .WithMany("UserMembers")
                        .HasForeignKey("MemberUserId");

                    b.Navigation("MemberUser");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Post", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Member", "PostMember")
                        .WithMany()
                        .HasForeignKey("PostMemberId");

                    b.Navigation("PostMember");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostTag", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Post", "PostTagPost")
                        .WithMany("PostPostTags")
                        .HasForeignKey("PostTagPostId");

                    b.HasOne("Familestan.Core.Entities.Tag", "PostTagTag")
                        .WithMany("TagPostTags")
                        .HasForeignKey("PostTagTagId");

                    b.Navigation("PostTagPost");

                    b.Navigation("PostTagTag");
                });

            modelBuilder.Entity("Familestan.Core.Entities.PostWord", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId");

                    b.HasOne("Familestan.Core.Entities.Word", "Word")
                        .WithMany()
                        .HasForeignKey("WordId");

                    b.Navigation("Post");

                    b.Navigation("Word");
                });

            modelBuilder.Entity("Familestan.Core.Entities.RolePermission", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("Familestan.Core.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Familestan.Core.Entities.UserRole", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("Familestan.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Familestan.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Familestan.Core.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Familestan.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Familestan.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Familestan.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Familestan.Core.Entities.FamilyRelationType", b =>
                {
                    b.Navigation("FamilyClaims");

                    b.Navigation("FamilyRelations");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Post", b =>
                {
                    b.Navigation("PostComments");

                    b.Navigation("PostLikes");

                    b.Navigation("PostMediaFiles");

                    b.Navigation("PostPostTags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Familestan.Core.Entities.Tag", b =>
                {
                    b.Navigation("TagPostTags");
                });

            modelBuilder.Entity("Familestan.Core.Entities.User", b =>
                {
                    b.Navigation("UserMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
